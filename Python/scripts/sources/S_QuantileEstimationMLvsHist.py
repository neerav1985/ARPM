#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.4'
#       jupytext_version: 1.1.4
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
# ---

# # S_QuantileEstimationMLvsHist [<img src="https://www.arpm.co/lab/icons/icon_permalink.png" width=30 height=30 style="display: inline;">](https://www.arpm.co/lab/redirect.php?code=S_QuantileEstimationMLvsHist&codeLang=Python)
# For details, see [here](https://www.arpm.co/lab/redirect.php?permalink=eb-4-ex-mle-copy-1).

# ## Prepare the environment

# +
import os
import os.path as path
import sys

sys.path.append(path.abspath('../../functions-legacy'))

from numpy import percentile, sqrt, exp

from scipy.stats import t, lognorm
from scipy.io import loadmat

import matplotlib.pyplot as plt

plt.style.use('seaborn')

from CONFIG import GLOBAL_DB, TEMPORARY_DB
# -

# ## load dataset db_MaximumLikelihood, generated by the script S_MaximumLikelihood, to get the ML estimator of theta

# +
try:
    db = loadmat(os.path.join(GLOBAL_DB, 'db_MaximumLikelihood'), squeeze_me=True)
except FileNotFoundError:
    db = loadmat(os.path.join(TEMPORARY_DB, 'db_MaximumLikelihood'), squeeze_me=True)

theta_ML = db['theta_ML']
i_t = db['i_t']
# -

# ## compute ML-implied quantile

p = 0.01
if theta_ML <= 0:  # ????
    nu = 1
    # q_ML = icdf('tlocationscale',theta_ML,theta_ML,nu,p)
    q_ML = theta_ML + sqrt(theta_ML)*t.ppf(nu, 1 - p)
else:
    s = sqrt((theta_ML - 0.01) ** 2)
    q_ML = lognorm.ppf(p, s, scale=exp(theta_ML))

# ## compute sample quantile

# +
q_hist = percentile(i_t, 100*p)

# comparison of quantiles
print(q_ML, q_hist)
