#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.4'
#       jupytext_version: 1.1.4
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
# ---

# # S_EllipsoidTestSVI [<img src="https://www.arpm.co/lab/icons/icon_permalink.png" width=30 height=30 style="display: inline;">](https://www.arpm.co/lab/redirect.php?code=S_EllipsoidTestSVI&codeLang=Python)
# For details, see [here](https://www.arpm.co/lab/redirect.php?permalink=ExerSVIiid).

# ## Prepare the environment

# +
import os
import os.path as path
import sys

sys.path.append(path.abspath('../../functions-legacy'))

from numpy import diff

from scipy.io import loadmat

import matplotlib.pyplot as plt
from matplotlib.pyplot import figure

plt.style.use('seaborn')

from CONFIG import GLOBAL_DB, TEMPORARY_DB
from ARPM_utils import save_plot
from autocorrelation import autocorrelation
from InvarianceTestEllipsoid import InvarianceTestEllipsoid
# -

# ## Load the database generated by script S_FitSVI

# +
try:
    db = loadmat(os.path.join(GLOBAL_DB, 'db_FitSVI'), squeeze_me=True)
except FileNotFoundError:
    db = loadmat(os.path.join(TEMPORARY_DB, 'db_FitSVI'), squeeze_me=True)

theta = db['theta']
# -

# ## Compute increments and autocorrelations

# +
lag_ = 10
# preallocating variables
delta_theta = {}
acf_delta_theta = {}

for k in range(6):
    delta_theta[k] = diff(theta[[k],:])  # increments
    acf_delta_theta[k] = autocorrelation(delta_theta[k], lag_)  # autocorrelations
# -

# ## IID test for SVI parameters

# +
lag = 10  # lag to be printed
ell_scale = 2  # ellipsoid radius coefficient
fit = 0  # fitting
pos = []  # use default settings for  plot positions

# names of figures
name = {}
name[0]=r'Invariance test(increments of $\theta_1$)'
name[1]=r'Invariance test(increments of $\theta_2$)'
name[2]=r'Invariance test(increments of $\theta_3$)'
name[3]=r'Invariance test(increments of $\theta_4$)'
name[4]=r'Invariance test(increments of $\theta_5$)'
name[5]=r'Invariance test(increments of $\theta_6$)'
for k in range(6):
    f = figure(figsize=(12,6))
    InvarianceTestEllipsoid(delta_theta[k], acf_delta_theta[k][0,1:], lag, fit, ell_scale, pos, name[k]);
    # save_plot(ax=plt.gca(), extension='png', scriptname=os.path.basename('.')[:-3], count=plt.get_fignums()[-1])
