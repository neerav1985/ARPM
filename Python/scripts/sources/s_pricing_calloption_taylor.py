#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.4'
#       jupytext_version: 1.2.4
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
# ---

# # s_pricing_couponbond_taylor
# For details, see here.

# +
import numpy as np
import pandas as pd
from scipy import stats
import matplotlib.pyplot as plt

from arpym.pricing.call_option_value import call_option_value

from arpym.statistics.moments_mvou import moments_mvou
from arpym.statistics.meancov_sp import meancov_sp
from arpym.statistics.saddle_point_quadn import saddle_point_quadn

from arpym.tools.histogram_sp import histogram_sp
from arpym.tools.logo import add_logo
# -

# ## [Input parameters](https://www.arpm.co/lab/redirect.php?permalink=s_pricing_calloption_taylor-parameters)

#+
deltat = 6  # time to the investment horizon
j_ = 1000  # number of scenarios
c = 0.04  # annualized coupons (percentage of the face value)
dt = 1/252 # numerical differentiation time step (yield)
dy = 10 ** -4   # numerical differentiation step (duration and convexity)

#-

# ## [Step 0](https://www.arpm.co/lab/redirect.php?permalink=s_pricing_calloption_taylor-implementation-step00): Upload data

# +
# import database generated by script s_projection_var1_yields
path = '~/databases/temporary-databases/'
file = 'db_call_data.csv'


k_strk = pd.read_csv(path+file,  # strike of the underlying
                       usecols=['k_strike'], nrows=1).values[0, 0]
t_end = pd.read_csv(path+file,
                    usecols=['m_'], nrows=1).values[0, 0].astype(int)+1
delta_t = pd.read_csv(path+file,  # time to horizon
                 usecols=['tau_hor'], nrows=1).values[0, 0].astype(int)
j_ = pd.read_csv(path+file,  # number of scenarios
                 usecols=['j_'], nrows=1).values[0, 0].astype(int)
data = pd.read_csv(path+file, usecols=['v_call_thor', 'log_s'])
v_call_kstrk_tend = data.v_call_thor.values.reshape(j_, t_end)
log_v_sandp = data.log_s.values.reshape(j_, t_end)
y = pd.read_csv(path+file, usecols=['y_rf'],
                         nrows=1).values[0, 0]












